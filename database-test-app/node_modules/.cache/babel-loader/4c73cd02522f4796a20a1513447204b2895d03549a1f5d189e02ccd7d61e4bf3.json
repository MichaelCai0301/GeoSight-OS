{"ast":null,"code":"// dataflow_version is optional\n\nconst update_dsd = async (agencyId, dataflowId, dataflow_version, geographicArea, indicator, sex, age, subnationalLevel) => {\n  try {\n    // Construct the API URL based on inputs\n    // Inputs must be IDs\n    // Each variable can be a group of variables, such as NT_ANT_HAZ_AVG+MG_RFGS_CNTRY_ASYLM_PER1000 for indicator\n    const apiUrlCurrentData = `https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/data/${agencyId},${dataflowId},${dataflow_version}/${geographicArea}.${indicator}.${sex}.${age}.${subnationalLevel}?format=fusion-json&dimensionAtObservation=AllDimensions&detail=structureOnly&includeMetrics=true&includeAllAnnotations=true`;\n\n    // Fetch the data from the API\n    const response = await fetch(apiUrlCurrentData);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const jsonData = await response.json();\n    const dimensions = jsonData.structure.dimensions.observation;\n    const parsedDimensions = {};\n    dimensions.forEach(dimension => {\n      parsedDimensions[dimension.id] = [];\n    });\n    for (let i = 0; i < dimensions.length; i++) {\n      const dimensionId = dimensions[i].id;\n      const dimensionValues = dimensions[i].values.map(value => ({\n        id: value.id,\n        name: value.name,\n        description: value.description\n      }));\n      parsedDimensions[dimensionId] = dimensionValues;\n    }\n\n    // Add the SDMX implementation field\n    parsedDimensions[\"sdmx_implementation\"] = [\"implementation 1\"];\n    return parsedDimensions;\n  } catch (error) {\n    console.error(\"Error fetching or parsing DSD from API:\", error);\n    return {\n      error: \"Error fetching data\"\n    };\n  }\n};\n\n// Helper function to fetch the codelist values using fetch and DOMParser\n// const fetchCodelist = async (agencyId, codelistId, codeVersion) => {\n//   try {\n//     // Construct the codelist API URL (this is an example, adjust as necessary)\n//     const codelistApiUrl = `https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/codelist/${agencyId}/${codelistId}/${codeVersion}`;\n\n//     // Fetch the codelist data\n//     const response = await fetch(codelistApiUrl);\n//     if (!response.ok) {\n//       throw new Error(\"Network response was not ok\");\n//     }\n//     const xmlString = await response.text();\n\n//     // Parse the codelist XML using DOMParser\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(xmlString, \"application/xml\");\n\n//     // Extract the possible values from the codelist\n//     const codes = xmlDoc.getElementsByTagName(\"str:Code\");\n//     const values = [];\n//     for (let i = 0; i < codes.length; i++) {\n//       const code = codes[i];\n//       const id = code.getAttribute(\"id\");\n//       const name = code.getElementsByTagName(\"com:Name\")[0].textContent;\n//       values.push([id, name]);\n//     }\n\n//     return values;\n//   } catch (error) {\n//     console.error(\"Error fetching or parsing codelist:\", error);\n//     return [];\n//   }\n// };\n\nconst getDataflows = async () => {\n  try {\n    const apiUrlDataflows = `https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/dataflow/all/all/all?format=fusion-json&detail=full&references=none&includeMetadata=true&includeMetrics=only&includeAllAnnotations=true`;\n    const response = await fetch(apiUrlDataflows);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const dataflows = (await response.json()).Dataflow;\n\n    // Extract the possible values from the codelist\n    const values = [];\n    for (let i = 0; i < dataflows.length; i++) {\n      values.push({\n        id: dataflows[i].id,\n        agencyId: dataflows[i].agencyId\n      });\n    }\n    return values;\n  } catch (error) {\n    console.error(\"Error fetching or parsing codelist:\", error);\n    return [];\n  }\n};\nexport default update_dsd;\nexport { getDataflows };","map":{"version":3,"names":["update_dsd","agencyId","dataflowId","dataflow_version","geographicArea","indicator","sex","age","subnationalLevel","apiUrlCurrentData","response","fetch","ok","Error","jsonData","json","dimensions","structure","observation","parsedDimensions","forEach","dimension","id","i","length","dimensionId","dimensionValues","values","map","value","name","description","error","console","getDataflows","apiUrlDataflows","dataflows","Dataflow","push"],"sources":["/Users/vivianhui/Desktop/t4sg/GeoSight-OS/database-test-app/src/update_dsd.jsx"],"sourcesContent":["// dataflow_version is optional\n\nconst update_dsd = async (\n  agencyId,\n  dataflowId,\n  dataflow_version,\n  geographicArea,\n  indicator,\n  sex,\n  age,\n  subnationalLevel\n) => {\n  try {\n    // Construct the API URL based on inputs\n    // Inputs must be IDs\n    // Each variable can be a group of variables, such as NT_ANT_HAZ_AVG+MG_RFGS_CNTRY_ASYLM_PER1000 for indicator\n    const apiUrlCurrentData = `https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/data/${agencyId},${dataflowId},${dataflow_version}/${geographicArea}.${indicator}.${sex}.${age}.${subnationalLevel}?format=fusion-json&dimensionAtObservation=AllDimensions&detail=structureOnly&includeMetrics=true&includeAllAnnotations=true`;\n\n    // Fetch the data from the API\n    const response = await fetch(apiUrlCurrentData);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n\n    const jsonData = await response.json();\n\n    const dimensions = jsonData.structure.dimensions.observation;\n    const parsedDimensions = {};\n    dimensions.forEach((dimension) => {\n      parsedDimensions[dimension.id] = [];\n    });\n\n    for (let i = 0; i < dimensions.length; i++) {\n      const dimensionId = dimensions[i].id;\n      const dimensionValues = dimensions[i].values.map((value) => ({\n        id: value.id,\n        name: value.name,\n        description: value.description,\n      }));\n      parsedDimensions[dimensionId] = dimensionValues;\n    }\n\n    // Add the SDMX implementation field\n    parsedDimensions[\"sdmx_implementation\"] = [\"implementation 1\"];\n\n    return parsedDimensions;\n  } catch (error) {\n    console.error(\"Error fetching or parsing DSD from API:\", error);\n    return { error: \"Error fetching data\" };\n  }\n};\n\n// Helper function to fetch the codelist values using fetch and DOMParser\n// const fetchCodelist = async (agencyId, codelistId, codeVersion) => {\n//   try {\n//     // Construct the codelist API URL (this is an example, adjust as necessary)\n//     const codelistApiUrl = `https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/codelist/${agencyId}/${codelistId}/${codeVersion}`;\n\n//     // Fetch the codelist data\n//     const response = await fetch(codelistApiUrl);\n//     if (!response.ok) {\n//       throw new Error(\"Network response was not ok\");\n//     }\n//     const xmlString = await response.text();\n\n//     // Parse the codelist XML using DOMParser\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(xmlString, \"application/xml\");\n\n//     // Extract the possible values from the codelist\n//     const codes = xmlDoc.getElementsByTagName(\"str:Code\");\n//     const values = [];\n//     for (let i = 0; i < codes.length; i++) {\n//       const code = codes[i];\n//       const id = code.getAttribute(\"id\");\n//       const name = code.getElementsByTagName(\"com:Name\")[0].textContent;\n//       values.push([id, name]);\n//     }\n\n//     return values;\n//   } catch (error) {\n//     console.error(\"Error fetching or parsing codelist:\", error);\n//     return [];\n//   }\n// };\n\nconst getDataflows = async () => {\n  try {\n    const apiUrlDataflows = `https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/dataflow/all/all/all?format=fusion-json&detail=full&references=none&includeMetadata=true&includeMetrics=only&includeAllAnnotations=true`;\n\n    const response = await fetch(apiUrlDataflows);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n\n    const dataflows = (await response.json()).Dataflow;\n\n    // Extract the possible values from the codelist\n    const values = [];\n    for (let i = 0; i < dataflows.length; i++) {\n      values.push({ id: dataflows[i].id, agencyId: dataflows[i].agencyId });\n    }\n\n    return values;\n  } catch (error) {\n    console.error(\"Error fetching or parsing codelist:\", error);\n    return [];\n  }\n};\n\nexport default update_dsd;\nexport { getDataflows };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}